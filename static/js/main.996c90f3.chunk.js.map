{"version":3,"sources":["pages/serach/SearchModal.js","deviceId.js","pages/serach/Search.js","App.js","serviceWorker.js","index.js"],"names":["SearchModal","data","name","data-testid","plScore","plCapital","type","disabled","checked","plWorkers","plRnD","plRegistered","plNotGlobEnt","is_friend","description","randomDeviceId","len","result","i","asciiNumber","Math","floor","random","String","fromCharCode","randomString","getCurrentDeviceId","deviceId","localStorage","getItem","setItem","Search","useState","ean","setEan","setData","isOpen","setOpen","handleSubmit","e","a","preventDefault","length","axios","get","params","code","device_id","resp","console","log","onSubmit","value","onChange","target","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uPAkDeA,EAhDK,SAAC,GAAY,IAAXC,EAAU,EAAVA,KAClB,OACI,6BACI,4BACKA,EAAKC,MAEK,2BAAdD,EAAKC,MACN,oCACI,yBAAKC,cAAY,YACZF,EAAKG,QADV,QAGA,oEAC+BH,EAAKI,UADpC,MAGA,6BACI,2BAAOF,cAAY,aAAaG,KAAK,WAAWC,UAAQ,EACjDC,QAA4B,MAAnBP,EAAKQ,YAFzB,sBAKA,6BACI,2BAAON,cAAY,SAASG,KAAK,WAAWC,UAAQ,EAC7CC,QAAwB,MAAfP,EAAKS,QAFzB,yCAKA,6BACI,2BAAOP,cAAY,gBAAgBG,KAAK,WAAWC,UAAQ,EACpDC,QAA+B,MAAtBP,EAAKU,eAFzB,2BAKA,6BACI,2BAAOR,cAAY,kBAAkBG,KAAK,WAAWC,UAAQ,EACtDC,QAA+B,MAAtBP,EAAKW,eAFzB,0DAKCX,EAAKY,WACF,wDAIJ,6BACKZ,EAAKa,gB,iBC7BbC,EAAiB,WAC1B,MAAM,OAAN,OAdwB,SAACC,GAEzB,IADA,IAAIC,EAAS,GACJC,EAAI,EAAGA,EAAIF,EAAKE,IAAK,CAC1B,IAAIC,EAAcC,KAAKC,MAAsB,GAAhBD,KAAKE,UAE9BL,GADAE,GAAe,GAAKA,GAAe,EACjBI,OAAOC,aAAaL,EAAc,IAElCI,OAAOC,aAAaL,EAAc,IAG5D,OAAOF,EAIOQ,CAAa,MAGlBC,EAAqB,WAC9B,IAAIC,EAAWC,aAAaC,QAAQ,aAKpC,OAJgB,MAAZF,IACAA,EAAUZ,IACVa,aAAaE,QAAQ,YAAaH,IAE/BA,GCgCII,EAlDA,WAAO,IAAD,EACGC,mBAAS,IADZ,mBACZC,EADY,KACPC,EADO,OAEKF,mBAAS,IAFd,mBAEZ/B,EAFY,KAENkC,EAFM,OAGOH,oBAAS,GAHhB,mBAGZI,EAHY,KAGJC,EAHI,KAQbC,EAAY,uCAAG,WAAMC,GAAN,eAAAC,EAAA,yDACnBD,EAAEE,mBACER,EAAIS,OAAS,GAFE,0CAIOC,IAAMC,IAAI,eAC5B,CACEC,OAAQ,CACNC,KAAMb,EACNc,UAAWrB,OARJ,OAINsB,EAJM,OAHGX,EAAQ,CAAED,QAAQ,IAgBhCD,EAAQa,EAAK/C,MAbF,kDAeXgD,QAAQC,IAAR,MAfW,0DAAH,sDAoBlB,OACE,0BAAMC,SAAUb,GACd,0CAEE,2BACIhC,KAAK,OACL8C,MAAOnB,EACPoB,SAAU,SAAAd,GAAC,OAAIL,EAAOK,EAAEe,OAAOF,WAIrC,4BAAQ9C,KAAK,UAAb,gBAEE8B,GACA,kBAAC,EAAD,CACEnC,KAAMA,MCrCDsD,MARf,WACE,OACE,6BACI,kBAAC,EAAD,QCMYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCPNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,c","file":"static/js/main.996c90f3.chunk.js","sourcesContent":["import React from 'react'\n\nconst SearchModal = ({data}) => {\n    return (\n        <div>\n            <h2>\n                {data.name}\n            </h2>\n            {data.name !== \"Nieprawidłowy kod\" &&\n            <>\n                <div data-testid=\"pl-score\">\n                    {data.plScore} pkt\n                </div>\n                <div>\n                    udział polskiego kapitału {data.plCapital} %\n                </div>\n                <div>\n                    <input data-testid=\"pl-workers\" type='checkbox' disabled\n                           checked={data.plWorkers === 100}/>\n                    produkuje w Polsce\n                </div>\n                <div>\n                    <input data-testid=\"pl-rnd\" type='checkbox' disabled\n                           checked={data.plRnD === 100}/>\n                    prowadzi badania i rozwój w Polsce\n                </div>\n                <div>\n                    <input data-testid=\"pl-registered\" type='checkbox' disabled\n                           checked={data.plRegistered === 100}/>\n                    zajerestrowana w Polsce\n                </div>\n                <div>\n                    <input data-testid=\"pl-not-glob-ent\" type='checkbox' disabled\n                           checked={data.plNotGlobEnt === 100}/>\n                    nie jest częścią zagranicznego koncernu\n                </div>\n                {data.is_friend && (\n                    <div>\n                        To jest przyjaciel Poli\n                    </div>\n                )}\n                <div>\n                    {data.description}\n                </div>\n            </>\n            }\n        </div>\n    )\n}\n\nexport default SearchModal","export const randomString = (len) => {\n    let result = \"\"\n    for (let i = 0; i < len; i++) {\n        let asciiNumber = Math.floor(Math.random() * 35);\n        if (asciiNumber >= 0 && asciiNumber <= 9) {\n            result = result + String.fromCharCode(asciiNumber + 48)\n        } else {\n            result = result + String.fromCharCode(asciiNumber + 87)\n        }\n    }\n    return result\n}\n\nexport const randomDeviceId = () => {\n    return `WEB-${randomString(32)}`\n}\n\nexport const getCurrentDeviceId = () => {\n    let deviceId = localStorage.getItem('DEVICE_ID')\n    if (deviceId == null) {\n        deviceId= randomDeviceId()\n        localStorage.setItem('DEVICE_ID', deviceId);\n    }\n    return deviceId;\n}","import React, { useState } from 'react'\nimport SearchModal from './SearchModal';\nimport axios from 'axios'\nimport {getCurrentDeviceId} from \"../../deviceId\";\n\nconst Search = () => {\n  const [ean, setEan] = useState(\"\")\n  const [data, setData] = useState({})\n  const [isOpen, setOpen] = useState(false)\n\n  const openModal = () => setOpen({ isOpen: true });\n  // const closeModal = () => setOpen({ isOpen: false });\n\n  const handleSubmit = async(e) => {\n    e.preventDefault();\n    if (ean.length > 0) {\n        try {\n           const resp = await axios.get('/get_by_code',\n            {\n              params: {\n                code: ean,\n                device_id: getCurrentDeviceId()\n              }\n            })\n\n            openModal();\n            setData(resp.data)\n        } catch(err) {\n            console.log(err)\n        }\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        Kod EAN:\n        <input\n            type=\"text\"\n            value={ean}\n            onChange={e => setEan(e.target.value)}\n        />\n      </label>\n\n      <button type=\"submit\">Sprawdź</button>\n      {\n        isOpen &&\n        <SearchModal\n          data={data}\n        />\n      }\n    </form>\n  )\n}\n\nexport default Search;","import React from 'react';\nimport Search from './pages/serach/Search'\n\nfunction App() {\n  return (\n    <div>\n        <Search/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nif (process.env.NODE_ENV === 'development') {\n    const { worker } = require('./mocks/browser')\n    worker.start()\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}