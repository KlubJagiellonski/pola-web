{
  "react typescript import styles": {
    "prefix": "importStyles",
    "body": ["import styles from './${TM_FILENAME_BASE}.module.scss';", ""],
    "description": "react typescript import styles"
  },
  "react typescript import bfc bridge": {
    "prefix": "importBFCBridge",
    "body": ["import * as Bridge from '@BFC/domain/ndt-domain';", ""],
    "description": "react typescript import styles"
  },
  "import base component scss": {
    "prefix": "importScssComponentBase",
    "body": ["@import 'Scripts/client/styles/component-base.scss';"],
    "description": "import base component scss"
  },
  "react typescript function": {
    "prefix": "xcf",
    "body": [
      "import * as React from 'react';",
      "",
      "export interface I${1:$TM_FILENAME_BASE} { }",
      "",
      "export const ${1:$TM_FILENAME_BASE}: React.FC<I${1:$TM_FILENAME_BASE}> = (props: I${1:$TM_FILENAME_BASE}) => (",
      "  <div>",
      "    $0",
      "  </div>",
      ");"
    ],
    "description": "react typescript function"
  },
  "react short typescript function": {
    "prefix": "scf",
    "body": ["export const ${1:CompName}: React.FC<{}> = (props) => (", "  <div>", "    $0", "  </div>", ");"],
    "description": "react typescript function"
  },
  "redux typescript action": {
    "prefix": "rxa",
    "body": [
      "export const ${1:ActionName} = (prop: any): IAction => ({",
      "  type: 'ACTION_TYPE',",
      "  meta: {},",
      "  payload: {",
      "    prop",
      "  }",
      "});"
    ],
    "description": "redux typescript template for action builder"
  },
  "redux toolkit reducer": {
    "prefix": "rtr",
    "body": [
      "import { createSlice } from \"@reduxjs/toolkit\";",
      "",
      "export interface I${1:ReducerName}State {",
      "  initialized: boolean;",
      "}",
      "",
      "const initialState: I${1:ReducerName}State = {",
      "  initialized: false,",
      "}",
      "",
      "const ${1:ReducerName}Slice = createSlice({",
      "  name: '${1:ReducerName}',",
      "  initialState,",
      "  reducers: {",
      "    initialize: (state: I${1:ReducerName}State) => {",
      "      state.initialized = true;",
      "    },",
      "  }",
      "});"
      "",
      "export const {",
      "  initialize",
      "} = ${1:ReducerName}Slice.actions;",
      "export default ${1:ReducerName}Slice.reducer;"
    ],
    "description": "redux typescript template for action builder"
  },
  "react typescript props deconstruct": {
    "prefix": "rrsp",
    "body": ["const {$0} = this.props;"],
    "description": "react typescript props deconstruct"
  },
  "react component": {
    "prefix": "xcc",
    "body": [
      "import * as React from 'react';",
      "",
      "export interface ${1:compName}Props { }",
      "",
      "export interface ${1:compName}State { }",
      "",
      "export class ${1:compName} extends React.Component<${1:compName}Props, ${1:compName}State> {",
      "    constructor(props: ${1:compName}Props) {",
      "        super(props);",
      "    }",
      "",
      "    public render() {",
      "        return <div>",
      "            $0",
      "        </div>;",
      "    }",
      "}"
    ],
    "description": "react typescript component"
  },
  "react typescript container component": {
    "prefix": "xccc",
    "body": [
      "import * as React from 'react';",
      "import { RootState } from '../store';",
      "import { connect, ConnectedProps } from 'react-redux';",
      "//import { documentsThunks } from '../store/documents/thunks';",
      "",
      "const mapState = (state: RootState) => ({",
      "});",
      "",
      "const mapDispatch = {",
      "   // loadDocuments: documentsThunks.loadDocuments,",
      "};",
      "",
      "const connector = connect(mapState, mapDispatch);",
      "",
      "type PropsFromRedux = ConnectedProps<typeof connector>;",
      "",
      "type Props = PropsFromRedux & {};",
      "",
      "export const ${1:containerName}Component: React.FC<Props> = (props) => {",
      "",
      "  return (",
      "    <div>",
      "     $0",
      "    </div>",
      "  );",
      "};",
      "",
      "export const ${1:containerName}Container = connector(${1:containerName}Component);",
      ""
    ],
    "description": "react typescript container component"
  },
  "react test initialization": {
    "prefix": "xti",
    "body": [
      "import { expect } from 'chai';",
      "",
      "describe('${1:describeName}', () => {",
      "  it('${2:testName}', () => {",
      "    // arrange",
      "",
      "    // act",
      "",
      "    // assert",
      "    expect($0).to.eq(true);",
      "  });",
      "});",
      ""
    ],
    "description": "react test initialization"
  },
  "react add test case": {
    "prefix": "xit",
    "body": [
      "",
      "  it('${1:testName}', () => {",
      "    // arrange",
      "",
      "    // act",
      "",
      "    // assert",
      "    expect($0).to.eq(true);",
      "  });",
      ""
    ],
    "description": "react add test case"
  }
}
