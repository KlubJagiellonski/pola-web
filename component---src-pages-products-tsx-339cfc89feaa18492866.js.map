{"version":3,"sources":["webpack:///./src/components/Placeholder.tsx","webpack:///./src/components/buttons/SecondaryButton.tsx","webpack:///./src/layout/PageSection.tsx","webpack:///./src/search/results-list/DynamicProductResults.tsx","webpack:///./src/pages/products.tsx"],"names":["Wrapper","styled","WrapperSection","color","text","light","padding","normal","fontSize","desktopHeaderHeight","Placeholder","background","red","ButtonContainer","Button","border","white","Device","mobile","tiny","SecondaryButton","label","icon","className","disabled","styles","children","onClick","theme","e","stopPropagation","PageSection","section","backgroundColor","textColor","primary","textAlign","desktop","props","size","undefined","pageWidth","DynamicProductResults","state","phrase","pages","totalItems","onSelect","onLoadMore","loadButton","SearchStateName","LOADING","PrimaryButton","Spinner","button","ButtonThemes","ButtonFlavor","RED","SearchResultsHeader","searchState","SearchResultsList","results","actions","MissingProductInfo","connect","app","search","stateName","searchResults","INITIAL","reduceToFlatProductsList","resultPages","token","nextPageToken","searchDispatcher","invokeLoadMore","selectProduct","location","dispatch","useDispatch","React","useEffect","LoadBrowserLocation","SelectActivePage","PageType","PRODUCTS","PageLayout","SEOMetadata","pageTitle","navigateTo","urls","pola","home"],"mappings":"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","file":"component---src-pages-products-tsx-339cfc89feaa18492866.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { WrapperSection } from '../styles/GlobalStyle.css';\nimport { color, padding, fontSize, desktopHeaderHeight } from '../styles/theme';\n\nconst Wrapper = styled(WrapperSection)`\n  color: ${color.text.light};\n  padding: ${padding.normal};\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n  font-size: ${fontSize.normal};\n  font-weight: bold;\n  height: ${desktopHeaderHeight};\n\n  p {\n    margin: 0;\n    padding: 0;\n  }\n`;\n\ninterface IPlaceholder {\n  text: string;\n}\n\nconst Placeholder: React.FC<IPlaceholder> = ({ text }) => {\n  return (\n    <Wrapper color={color.background.red}>\n      <p>{text}</p>\n    </Wrapper>\n  );\n};\n\nexport default Placeholder;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Button, IButtonTheme } from './Button';\nimport { color, Device, fontSize } from '../../styles/theme';\n\nconst ButtonContainer = styled(Button)`\n  border-radius: 20px;\n  border: 2px solid ${color.border.white};\n  font-weight: 300;\n  text-transform: uppercase;\n\n  @media ${Device.mobile} {\n    font-size: ${fontSize.tiny};\n  }\n`;\n\nexport interface ISecondaryButton {\n  label?: string;\n  icon?: React.ReactNode;\n  disabled?: boolean;\n  styles: IButtonTheme;\n  fontSize?: string;\n  className?: string;\n  children?: React.ReactNode;\n\n  onClick?: () => void;\n}\n\nexport const SecondaryButton: React.FC<ISecondaryButton> = ({\n  label,\n  icon,\n  className,\n  disabled,\n  styles,\n  children,\n  onClick,\n}) => {\n  const handleClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    !disabled && onClick && onClick();\n  };\n\n  return (\n    <ButtonContainer theme={styles} className={className} onClick={handleClick} disabled={disabled}>\n      {icon}\n      {label}\n      {children}\n    </ButtonContainer>\n  );\n};\n","import styled from 'styled-components';\nimport { Device, pageWidth, padding, color } from '../styles/theme';\n\ninterface IPageSection {\n  size?: 'narrow' | 'full';\n  styles?: {\n    backgroundColor?: string;\n    textColor?: string;\n    textAlign?: string;\n  };\n}\n\nexport const PageSection = styled.section<IPageSection>`\n  width: 100%;\n  margin: 0 auto;\n  background-color: ${({ styles }) => styles?.backgroundColor || 'transparent'};\n  color: ${({ styles }) => styles?.textColor || color.text.primary};\n  text-align: ${({ styles }) => styles?.textAlign || 'left'};\n  position: relative;\n  box-sizing: border-box;\n\n  @media ${Device.mobile} {\n    padding: 0 ${padding.tiny};\n  } \n  @media ${Device.desktop} {\n    max-width: ${(props) => (props.size === 'full' ? undefined : pageWidth)};\n    padding-bottom: ${(props) => (props.size === 'full' ? 0 : padding.normal)};\n  }\n`;\n","import React from 'react';\nimport { PageSection } from '../../layout/PageSection';\nimport { color } from '../../styles/theme';\nimport { EAN, IProductData } from '../../domain/products';\nimport { SearchResultsList } from '../../search/results-list/SearchResultsList';\nimport { PrimaryButton } from '../../components/buttons/PrimaryButton';\nimport { ButtonThemes, ButtonFlavor } from '../../components/buttons/Button';\nimport { Spinner } from '../../components/Spinner';\nimport { SearchStateName } from '../../state/search/search-reducer';\nimport { SearchResultsHeader } from '../../search/results-list/SearchResultsHeader';\nimport { MissingProductInfo } from '../../search/results-list/MissingProductInfo';\n\ninterface IDynamicProductResults {\n  state: SearchStateName;\n  phrase: string;\n  token: string;\n  pages: IProductData[];\n  totalItems: number;\n\n  onSelect: (code: EAN) => void;\n  onLoadMore: () => void;\n}\n\nexport const DynamicProductResults: React.FC<IDynamicProductResults> = ({\n  state,\n  phrase,\n  pages,\n  totalItems,\n  onSelect,\n  onLoadMore,\n}) => {\n  const loadButton =\n    state === SearchStateName.LOADING ? (\n      <PrimaryButton\n        disabled={true}\n        icon={<Spinner styles={{ size: 20, color: color.button.white }} />}\n        styles={ButtonThemes[ButtonFlavor.RED]}\n      />\n    ) : (\n      <PrimaryButton label=\"Wczytaj wiÄ™cej\" styles={ButtonThemes[ButtonFlavor.RED]} onClick={onLoadMore} />\n    );\n\n  return (\n    <>\n      <SearchResultsHeader phrase={phrase} totalItems={totalItems} searchState={state} />\n      <PageSection>\n        <SearchResultsList results={pages} totalItems={totalItems} onSelect={onSelect} actions={loadButton} />\n        <MissingProductInfo />\n      </PageSection>\n    </>\n  );\n};\n","import React from 'react';\nimport { connect, useDispatch } from 'react-redux';\n\nimport { PageLayout } from '../layout/PageLayout';\nimport SEOMetadata from '../utils/browser/SEOMetadata';\nimport { IPolaState } from '../state/types';\nimport { searchDispatcher } from '../state/search/search-dispatcher';\nimport { LoadBrowserLocation, SelectActivePage } from '../state/app/app-actions';\nimport { EAN, IProductData } from '../domain/products';\nimport { SearchStateName } from '../state/search/search-reducer';\nimport { navigateTo } from '../utils/browser';\nimport { PageType, urls } from '../domain/website';\nimport { reduceToFlatProductsList } from '../domain/products/search-service';\nimport { DynamicProductResults } from '../search/results-list/DynamicProductResults';\nimport Placeholder from '../components/Placeholder';\n\ninterface IProductsPage {\n  location?: Location;\n  searchState: SearchStateName;\n  searchResults?: {\n    phrase: string;\n    token: string;\n    pages: IProductData[];\n    totalItems: number;\n  };\n\n  onLoadMore: () => void;\n  selectProduct: (code: EAN) => void;\n}\n\nconst ProductsPage = (props: IProductsPage) => {\n  const { location, searchState, searchResults, onLoadMore } = props;\n\n  const dispatch = useDispatch();\n\n  React.useEffect(() => {\n    if (location) {\n      dispatch(LoadBrowserLocation(location));\n      dispatch(SelectActivePage(PageType.PRODUCTS));\n    }\n  }, []);\n\n  if (!searchResults) {\n    navigateTo(urls.pola.home);\n    return null;\n  }\n\n  return (\n    <PageLayout>\n      <SEOMetadata pageTitle=\"Znalezione produkty\" />\n      <Placeholder text=\"Lista produktÃ³w\" />\n      <DynamicProductResults\n        {...searchResults}\n        state={searchState}\n        onSelect={props.selectProduct}\n        onLoadMore={onLoadMore}\n      />\n    </PageLayout>\n  );\n};\n\nexport default connect(\n  (state: IPolaState) => {\n    const { app, search } = state;\n    return {\n      searchState: search.stateName,\n      searchResults:\n        search.stateName !== SearchStateName.INITIAL && search.stateName !== SearchStateName.LOADING\n          ? {\n              phrase: search.phrase,\n              pages: reduceToFlatProductsList(search.resultPages),\n              totalItems: search.totalItems,\n              token: search.nextPageToken,\n            }\n          : undefined,\n    };\n  },\n  {\n    onLoadMore: searchDispatcher.invokeLoadMore,\n    selectProduct: searchDispatcher.selectProduct,\n  }\n)(ProductsPage);\n"],"sourceRoot":""}