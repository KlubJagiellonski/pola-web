{"version":3,"sources":["webpack:///./src/layout/DevelopmentPlaceholder.tsx","webpack:///./src/pages/products.tsx"],"names":["Container","styled","div","DevelopmentPlaceholder","text","size","styles","backgroundColor","color","background","secondary","textColor","primary","textAlign","connect","state","location","app","phrase","search","searchResults","products","searchState","stateName","onLoadMore","searchDispatcher","invokeLoadMore","selectProduct","props","dispatch","useDispatch","React","useEffect","LoadBrowserLocation","SelectActivePage","PageType","PRODUCTS","SearchStateName","INITIAL","length","navigateTo","urls","pola","home","loadButton","LOADING","disabled","icon","button","white","ButtonColor","Red","label","onClick","pageTitle","results","actions","onSelect"],"mappings":"4FAAA,+FAKMA,EAAYC,UAAOC,IAAV,wFAAGD,CAAH,8EAWFE,EAA4D,SAAC,GAAD,QAAGC,YAAH,MAAU,mBAAV,SACvE,kBAAC,IAAD,CACEC,KAAK,OACLC,OAAQ,CAAEC,gBAAiBC,IAAMC,WAAWC,UAAWC,UAAWH,IAAMJ,KAAKQ,QAASC,UAAW,WACjG,kBAACb,EAAD,KACE,4BAAKI,O,kCCrBX,gOAyEeU,6BACb,SAACC,GAAD,MAAwB,CACtBC,SAAUD,EAAME,IAAID,SACpBE,OAAQH,EAAMI,OAAOD,OACrBE,cAAeL,EAAMI,OAAOE,SAC5BC,YAAaP,EAAMI,OAAOI,aAE5B,CACEC,WAAYC,IAAiBC,eAC7BC,cAAeF,IAAiBE,eATrBb,EA1CM,SAACc,GACpB,IAAQV,EAA6DU,EAA7DV,OAAQE,EAAqDQ,EAArDR,cAAeJ,EAAsCY,EAAtCZ,SAAUQ,EAA4BI,EAA5BJ,WAAYF,EAAgBM,EAAhBN,YAC/CO,EAAWC,wBAUjB,GARAC,IAAMC,WAAU,WACVhB,IACFa,EAASI,YAAoBjB,IAC7Ba,EAASK,YAAiBC,IAASC,cAEpC,IAEkBd,IAAgBe,IAAgBC,WAAalB,GAAiBA,EAAcmB,OAAS,GAGxG,OADAC,YAAWC,IAAKC,KAAKC,MACd,KAGT,IAAMC,EACJtB,IAAgBe,IAAgBQ,QAC9B,kBAAC,IAAD,CACEC,UAAU,EACVC,KAAM,kBAAC,IAAD,CAASzC,OAAQ,CAAED,KAAM,GAAIG,MAAOA,IAAMwC,OAAOC,SACvDzC,MAAO0C,IAAYC,MAGrB,kBAAC,IAAD,CAAeC,MAAM,iBAAiB5C,MAAO0C,IAAYC,IAAKE,QAAS7B,IAG3E,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAa8B,UAAU,wBACvB,kBAAC,IAAD,CAAwBlD,KAAK,oBAC7B,kBAAC,IAAD,CAAqBc,OAAQA,EAAQE,cAAeA,EAAeE,YAAaA,IAC/EF,GACC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAmBmC,QAASnC,EAAeoC,QAASZ,EAAYa,SAAU7B,EAAMD","file":"component---src-pages-products-tsx-1b40c95b55fac9ed99ef.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { color } from '../styles/theme';\nimport { PageSection } from './PageSection';\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 12rem;\n`;\n\ninterface IDevelopmentPlaceholder {\n  text?: string;\n}\n\nexport const DevelopmentPlaceholder: React.FC<IDevelopmentPlaceholder> = ({ text = 'Strona w budowie' }) => (\n  <PageSection\n    size=\"full\"\n    styles={{ backgroundColor: color.background.secondary, textColor: color.text.primary, textAlign: 'center' }}>\n    <Container>\n      <h2>{text}</h2>\n    </Container>\n  </PageSection>\n);\n","import React from 'react';\nimport { connect, useDispatch } from 'react-redux';\n\nimport { PageLayout } from '../layout/PageLayout';\nimport SEOMetadata from '../utils/browser/SEOMetadata';\nimport { PageSection } from '../layout/PageSection';\nimport { color } from '../styles/theme';\nimport { IPolaState } from '../state/types';\nimport { searchDispatcher } from '../state/search/search-dispatcher';\nimport { LoadBrowserLocation, SelectActivePage } from '../state/app/app-actions';\nimport { IProductData } from '../domain/products';\nimport { SearchResultsList } from '../search/results-list/SearchResultsList';\nimport { PrimaryButton } from '../components/buttons/PrimaryButton';\nimport { ButtonColor } from '../styles/button-theme';\nimport { Spinner } from '../components/Spinner';\nimport { SearchStateName } from '../state/search/search-reducer';\nimport { SearchResultsHeader } from '../search/results-list/SearchResultsHeader';\nimport { navigateTo } from '../utils/browser';\nimport { DevelopmentPlaceholder } from '../layout/DevelopmentPlaceholder';\nimport { PageType, urls } from '../domain/website';\n\ninterface IProductsPage {\n  location?: Location;\n  phrase: string;\n  searchResults: IProductData[];\n  searchState: SearchStateName;\n\n  onLoadMore: () => void;\n  selectProduct: (code: string, id: string) => void;\n}\n\nconst ProductsPage = (props: IProductsPage) => {\n  const { phrase, searchResults, location, onLoadMore, searchState } = props;\n  const dispatch = useDispatch();\n\n  React.useEffect(() => {\n    if (location) {\n      dispatch(LoadBrowserLocation(location));\n      dispatch(SelectActivePage(PageType.PRODUCTS));\n    }\n  }, []);\n\n  const emptyResults = searchState === SearchStateName.INITIAL && (!searchResults || searchResults.length < 1);\n  if (emptyResults) {\n    navigateTo(urls.pola.home);\n    return null;\n  }\n\n  const loadButton =\n    searchState === SearchStateName.LOADING ? (\n      <PrimaryButton\n        disabled={true}\n        icon={<Spinner styles={{ size: 20, color: color.button.white }} />}\n        color={ButtonColor.Red}\n      />\n    ) : (\n      <PrimaryButton label=\"Wczytaj więcej\" color={ButtonColor.Red} onClick={onLoadMore} />\n    );\n\n  return (\n    <PageLayout>\n      <SEOMetadata pageTitle=\"Znalezione produkty\" />\n      <DevelopmentPlaceholder text=\"Lista produktów\" />\n      <SearchResultsHeader phrase={phrase} searchResults={searchResults} searchState={searchState} />\n      {searchResults && (\n        <PageSection>\n          <SearchResultsList results={searchResults} actions={loadButton} onSelect={props.selectProduct} />\n        </PageSection>\n      )}\n    </PageLayout>\n  );\n};\n\nexport default connect(\n  (state: IPolaState) => ({\n    location: state.app.location,\n    phrase: state.search.phrase,\n    searchResults: state.search.products,\n    searchState: state.search.stateName,\n  }),\n  {\n    onLoadMore: searchDispatcher.invokeLoadMore,\n    selectProduct: searchDispatcher.selectProduct,\n  }\n)(ProductsPage);\n"],"sourceRoot":""}